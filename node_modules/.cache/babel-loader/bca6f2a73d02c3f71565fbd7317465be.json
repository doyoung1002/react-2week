{"ast":null,"code":"// Action value\nconst ADD_TODO = \"ADD_TODO\";\nconst GET_TODO_BY_ID = \"GET_TODO_BY_ID\";\nconst DELETE_TODO = \"DELETE_TODO\";\nconst TOGGLE_STATUS_TODO = \"TOGGLE_STATUS_TODO\"; // Action Creator\n// Todo를 추가하는 action creator\n\nexport const addTodo = payload => {\n  return {\n    type: ADD_TODO,\n    payload\n  };\n}; // Todo를 지우는 action creator\n\nexport const deleteTodo = payload => {\n  return {\n    type: DELETE_TODO,\n    payload\n  };\n}; // Todo를 isDone를 변경하는 action creator\n\nexport const toggleStatusTodo = id => {\n  return {\n    type: TOGGLE_STATUS_TODO,\n    payload: id\n  };\n}; // 상세 페이지에서 특정 Todo만 조회하는 action creator\n\nexport const getTodoByID = payload => {\n  return {\n    type: GET_TODO_BY_ID,\n    payload\n  };\n}; // initial state\n\nconst initialState = {\n  todos: [{\n    id: \"1\",\n    title: \"리액트\",\n    body: \"리액트를 배워봅시다\",\n    isDone: false\n  }],\n  // 주석처리\n  // todo: {\n  //   id: \"0\",\n  //   title: \"\",\n  //   body: \"\",\n  //   isDone: false,\n  // },\n  todo: null\n};\n\nconst todos = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ADD_TODO:\n      return { // 기존 코드\n        // ...state,\n        // todos: [action.payload],\n        // 수정코드\n        // 여기서 새로운 할일이 추가 되는것이 아닌 새로운 배열을 생성함\n        // 추가할 때  이전의 목록이 사라진다.\n        // todos배열을 전개 연산자 ...를 사용하여 새로운 배열을 복사한다.\n        // 그리고 action.payload를 추가하면 오류 해결 된다.\n        ...state,\n        todos: [...state.todos, action.payload]\n      };\n\n    case TOGGLE_STATUS_TODO:\n      return { ...state,\n        todos: state.todos.map(todo => {\n          if (todo.id === action.payload) {\n            return { ...todo,\n              isDone: !todo.isDone\n            };\n          } else {\n            return todo;\n          }\n        })\n      };\n\n    case GET_TODO_BY_ID:\n      return { ...state,\n        todo: state.todos.find(todo => {\n          return todo.id === action.payload;\n        })\n      };\n    // 추가\n\n    case DELETE_TODO:\n      // filter를 건 값을 덮어씌운다.\n      const deleteTodos = state.todos.filter(todo => {\n        return todo.id !== action.payload;\n      });\n      return { ...state,\n        todos: deleteTodos\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default todos;","map":{"version":3,"names":["ADD_TODO","GET_TODO_BY_ID","DELETE_TODO","TOGGLE_STATUS_TODO","addTodo","payload","type","deleteTodo","toggleStatusTodo","id","getTodoByID","initialState","todos","title","body","isDone","todo","state","action","map","find","deleteTodos","filter"],"sources":["/Users/leedoyoung/Desktop/todolist_redux_assignment/src/redux/modules/todos.js"],"sourcesContent":["// Action value\nconst ADD_TODO = \"ADD_TODO\";\nconst GET_TODO_BY_ID = \"GET_TODO_BY_ID\";\nconst DELETE_TODO = \"DELETE_TODO\";\nconst TOGGLE_STATUS_TODO = \"TOGGLE_STATUS_TODO\";\n\n// Action Creator\n// Todo를 추가하는 action creator\nexport const addTodo = (payload) => {\n  return {\n    type: ADD_TODO,\n    payload,\n  };\n};\n\n// Todo를 지우는 action creator\nexport const deleteTodo = (payload) => {\n  return {\n    type: DELETE_TODO,\n    payload,\n  };\n};\n\n// Todo를 isDone를 변경하는 action creator\nexport const toggleStatusTodo = (id) => {\n  return {\n    type: TOGGLE_STATUS_TODO,\n    payload: id,\n  };\n};\n\n// 상세 페이지에서 특정 Todo만 조회하는 action creator\nexport const getTodoByID = (payload) => {\n  return {\n    type: GET_TODO_BY_ID,\n    payload,\n  };\n};\n\n// initial state\nconst initialState = {\n  todos: [\n    {\n      id: \"1\",\n      title: \"리액트\",\n      body: \"리액트를 배워봅시다\",\n      isDone: false,\n    },\n  ],\n  // 주석처리\n  // todo: {\n  //   id: \"0\",\n  //   title: \"\",\n  //   body: \"\",\n  //   isDone: false,\n  // },\n\n  todo: null\n};\n\nconst todos = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_TODO:\n      return {\n        // 기존 코드\n        // ...state,\n        // todos: [action.payload],\n\n        // 수정코드\n        // 여기서 새로운 할일이 추가 되는것이 아닌 새로운 배열을 생성함\n        // 추가할 때  이전의 목록이 사라진다.\n        // todos배열을 전개 연산자 ...를 사용하여 새로운 배열을 복사한다.\n        // 그리고 action.payload를 추가하면 오류 해결 된다.\n        ...state,\n        todos: [...state.todos, action.payload]\n      };\n\n    case TOGGLE_STATUS_TODO:\n      return {\n        ...state,\n        todos: state.todos.map((todo) => {\n          if (todo.id === action.payload) {\n            return {\n              ...todo,\n              isDone: !todo.isDone,\n            };\n          } else {\n            return todo;\n          }\n        }),\n      };\n\n    case GET_TODO_BY_ID:\n      return {\n        ...state,\n        todo: state.todos.find((todo) => {\n          return todo.id === action.payload;\n        }),\n      };\n\n    // 추가\n    case DELETE_TODO:\n      // filter를 건 값을 덮어씌운다.\n      const deleteTodos = state.todos.filter((todo) => {\n        return todo.id !== action.payload;\n      });\n      return {\n        ...state,\n        todos: deleteTodos,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default todos;\n"],"mappings":"AAAA;AACA,MAAMA,QAAQ,GAAG,UAAjB;AACA,MAAMC,cAAc,GAAG,gBAAvB;AACA,MAAMC,WAAW,GAAG,aAApB;AACA,MAAMC,kBAAkB,GAAG,oBAA3B,C,CAEA;AACA;;AACA,OAAO,MAAMC,OAAO,GAAIC,OAAD,IAAa;EAClC,OAAO;IACLC,IAAI,EAAEN,QADD;IAELK;EAFK,CAAP;AAID,CALM,C,CAOP;;AACA,OAAO,MAAME,UAAU,GAAIF,OAAD,IAAa;EACrC,OAAO;IACLC,IAAI,EAAEJ,WADD;IAELG;EAFK,CAAP;AAID,CALM,C,CAOP;;AACA,OAAO,MAAMG,gBAAgB,GAAIC,EAAD,IAAQ;EACtC,OAAO;IACLH,IAAI,EAAEH,kBADD;IAELE,OAAO,EAAEI;EAFJ,CAAP;AAID,CALM,C,CAOP;;AACA,OAAO,MAAMC,WAAW,GAAIL,OAAD,IAAa;EACtC,OAAO;IACLC,IAAI,EAAEL,cADD;IAELI;EAFK,CAAP;AAID,CALM,C,CAOP;;AACA,MAAMM,YAAY,GAAG;EACnBC,KAAK,EAAE,CACL;IACEH,EAAE,EAAE,GADN;IAEEI,KAAK,EAAE,KAFT;IAGEC,IAAI,EAAE,YAHR;IAIEC,MAAM,EAAE;EAJV,CADK,CADY;EASnB;EACA;EACA;EACA;EACA;EACA;EACA;EAEAC,IAAI,EAAE;AAjBa,CAArB;;AAoBA,MAAMJ,KAAK,GAAG,YAAkC;EAAA,IAAjCK,KAAiC,uEAAzBN,YAAyB;EAAA,IAAXO,MAAW;;EAC9C,QAAQA,MAAM,CAACZ,IAAf;IACE,KAAKN,QAAL;MACE,OAAO,EACL;QACA;QACA;QAEA;QACA;QACA;QACA;QACA;QACA,GAAGiB,KAVE;QAWLL,KAAK,EAAE,CAAC,GAAGK,KAAK,CAACL,KAAV,EAAiBM,MAAM,CAACb,OAAxB;MAXF,CAAP;;IAcF,KAAKF,kBAAL;MACE,OAAO,EACL,GAAGc,KADE;QAELL,KAAK,EAAEK,KAAK,CAACL,KAAN,CAAYO,GAAZ,CAAiBH,IAAD,IAAU;UAC/B,IAAIA,IAAI,CAACP,EAAL,KAAYS,MAAM,CAACb,OAAvB,EAAgC;YAC9B,OAAO,EACL,GAAGW,IADE;cAELD,MAAM,EAAE,CAACC,IAAI,CAACD;YAFT,CAAP;UAID,CALD,MAKO;YACL,OAAOC,IAAP;UACD;QACF,CATM;MAFF,CAAP;;IAcF,KAAKf,cAAL;MACE,OAAO,EACL,GAAGgB,KADE;QAELD,IAAI,EAAEC,KAAK,CAACL,KAAN,CAAYQ,IAAZ,CAAkBJ,IAAD,IAAU;UAC/B,OAAOA,IAAI,CAACP,EAAL,KAAYS,MAAM,CAACb,OAA1B;QACD,CAFK;MAFD,CAAP;IAOF;;IACA,KAAKH,WAAL;MACE;MACA,MAAMmB,WAAW,GAAGJ,KAAK,CAACL,KAAN,CAAYU,MAAZ,CAAoBN,IAAD,IAAU;QAC/C,OAAOA,IAAI,CAACP,EAAL,KAAYS,MAAM,CAACb,OAA1B;MACD,CAFmB,CAApB;MAGA,OAAO,EACL,GAAGY,KADE;QAELL,KAAK,EAAES;MAFF,CAAP;;IAKF;MACE,OAAOJ,KAAP;EAnDJ;AAqDD,CAtDD;;AAwDA,eAAeL,KAAf"},"metadata":{},"sourceType":"module"}